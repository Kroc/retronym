// retronym (C) copyright Kroc Camen 2017, 2018
// BSD 2-clause licence; see LICENSE.TXT

// retronym requires an indent to distinguish between a definition
// (such as labels) and the recall of a value, making the language
// whitespace-aware somewhat like python. therefore, the `whitespace`
// rule is defined without new-line and we manage that separately

WHITESPACE      = _{ " " | "\t" }

comment         = _{ ";" ~ ( !NEWLINE ~ ANY )* ~ NEWLINE }

// outline:
//==============================================================================

rym             = _{ SOI ~ ( NEWLINE | comment | root )* ~ EOI }

root            = _{ WHITESPACE* ~ list }

// almost everything in Retronym is an implicit list, commas are optional.
// for example, strings are self-contained lists of bytes. because macros
// consume all list elements between it and the next macro, we won't enforce
// list validity strongly here; we'll only concern ourselves with the terminals
// and let the parser do the actual validation.

list            = _{ expr ~ ","? ~ list? }

expr            = _{ value ~ ( operator ~ expr )? }

value           = _{
                    string
                |   keyword
                |   atom
                |   mac
                |   number
                |   deref
                }

//==============================================================================

keyword         = { "atom" | "macro" }

atom            = { ASCII_ALPHA_UPPER ~ ( ASCII_DIGIT | ASCII_ALPHA_UPPER )* }

mac             = {
                    // cannot begin with a digit
                    ( ASCII_ALPHA_LOWER | "_" )
                    // underscores allowed, unlike Atoms
                    ~ ( ASCII_DIGIT | ASCII_ALPHA_UPPER | "_" )*
                    // a trailing hash is allowed for the benefit of 6502
                    // instructions, e.g. `lda# $FF`
                    ~ "#"?
                }

// strings are obviously wrapped by speech-marks
// but Retronym does not allow for escape codes
string          = @{ "\"" ~ text ~ "\"" }

text            = @{ ( !"\"" ~ ANY )* }

// an integer [decimal] number uses digits "0"-"9" but cannot begin with "0"
// TODO: negative integers
// TODO: float numbers

int_number      = @{ "-"? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }

// a hexadecimal number uses a "$" sigil, followed by up to 32 hexadecimals
// TODO: some kind of separator for very large hex numbers?

hex_number      = @{ "$" ~ ASCII_HEX_DIGIT{1,32} }

// a binary number uses a "%" sigil, followed by up to 64 binary decimals

bin_number      = @{ "%" ~ ASCII_BIN_DIGIT{1,64} }

// this rule is silent as we will parse the specific type of number
// (dec, bin, hex) rather than this top-level token

number          = _{ int_number | hex_number | bin_number }

operator        = _{
                    // we look for power/exponention first as it's
                    // double-asterisk and we don't want to confuse
                    // it with multiply first
                    op_pow |

                    op_add | op_sub | op_mul | op_div | op_mod |
                    op_xor | op_and | op_or | op_shl | op_shr |

                    // the repeat operator is not a typical operator
                    // as it builds lists, but we'll handle that
                    // distinction at the AST level
                    op_rep
                }

//TODO: repeat: "x" (is this even an operator?)
//      range:  ".." / "..."
//      rolls?  "<<<" / ">>>"
//      not:    "!"? (overused), perhaps "~" instead?
//              big question regarding number of bits; require an operand?
//              e.g. "$FFFF ~ 16"

op_pow          = { "**" }  // power/exponention

op_add          = { "+" }   // add
op_sub          = { "-" }   // subtract
op_mul          = { "*" }   // multiply
op_div          = { "/" }   // divide
op_mod          = { "\\" }  // modulo (usually "%", already used though)

op_xor          = { "^" }   // exclusive-or
op_and          = { "&" }   // and
op_or           = { "|" }   // or
op_shl          = { "<<" }  // shift-left
op_shr          = { ">>" }  // shift-right


op_rep          = { "x" }   // repeat (for building a list)

// dereference (operator?)
//------------------------------------------------------------------------------

deref           = _{ deref_begin ~ expr ~ deref_end }
deref_begin     = { "[" }
deref_end       = { "]" }
